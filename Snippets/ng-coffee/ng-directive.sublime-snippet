<snippet>
  <content><![CDATA[
Application.directive "${1}", [${2}], (${3}) ->
  name: ""
  priority: 1000
  terminal: true
  scope: {
    # true - then a new scope will be created for this directive.
    # If multiple directives on the same element request a new scope,
    # only one new scope is created. The new scope rule does not apply
    # for the root of the template since the root of the template always gets a new scope.

    # {} (object hash) - then a new 'isolate' scope is created. The 'isolate' scope differs
    # from normal scope in that it does not prototypically inherit from the parent scope.
    # This is useful when creating reusable components, which should not accidentally read or
    # modify data in the parent scope.
    # The 'isolate' scope takes an object hash which defines a set of local scope properties
    # derived from the parent scope. These local properties are useful for aliasing values
    # for templates. Locals definition is a hash of local scope property to its source:

    # @ or @attr - bind a local scope property to the value of DOM attribute. The result is always a string since DOM attributes are strings. If no attr name is specified then the attribute name is assumed to be the same as the local name. Given <widget my-attr="hello {{name}}"> and widget definition of scope: { localName:'@myAttr' }, then widget scope property localName will reflect the interpolated value of hello {{name}}. As the name attribute changes so will the localName property on the widget scope. The name is read from the parent scope (not component scope).
    # = or =attr - set up bi-directional binding between a local scope property and the parent scope property of name defined via the value of the attr attribute. If no attr name is specified then the attribute name is assumed to be the same as the local name. Given <widget my-attr="parentModel"> and widget definition of scope: { localModel:'=myAttr' }, then widget scope property localModel will reflect the value of parentModel on the parent scope. Any changes to parentModel will be reflected in localModel and any changes in localModel will reflect in parentModel.
    # & or &attr - provides a way to execute an expression in the context of the parent scope. If no attr name is specified then the attribute name is assumed to be the same as the local name. Given <widget my-attr="count = count + value"> and widget definition of scope: { localFn:'&myAttr' }, then isolate scope property localFn will point to a function wrapper for the count = count + value expression. Often it's desirable to pass data from the isolated scope via an expression and to the parent scope, this can be done by passing a map of local variable names and values into the expression wrapper fn. For example, if the expression is increment(amount) then we can specify the amount value by calling the localFn as localFn({amount: 22}).
  }
  controller: ""
    # Controller constructor function. The controller is instantiated before the pre-linking
    # phase and it is shared with other directives if they request it by name (see require attribute).
    # This allows the directives to communicate with each other and augment each other's behavior.
    # The controller is injectable with the following locals:

    # $scope - Current scope associated with the element
    # $element - Current element
    # $attrs - Current attributes object for the element
    # $transclude - A transclude linking function pre-bound to the correct transclusion scope: function(cloneLinkingFn).
    # To avoid errors after minification the bracket notation should be used:

    # controller: ['$scope', '$element', '$attrs', '$transclude', function($scope, $element, $attrs, $transclude) { ... }]
  require: ""
    # Require another controller be passed into current directive linking function.
    # The require takes a name of the directive controller to pass in.
    # If no such controller can be found an error is raised. The name can be prefixed with:
    # ? - Don't raise an error. This makes the require dependency optional.
    # ^ - Look for the controller on parent elements as well.
  restrict: ""
    # E - Element name: <my-directive></my-directive>
    # A - Attribute: <div my-directive="exp"> </div>
    # C - Class: <div class="my-directive: exp;"></div>
    # M - Comment: <!-- directive: my-directive exp -->
  template: ""
  templateUrl: ""
  replace: true
  transclude:
    # true - transclude the content of the directive.
    # 'element' - transclude the whole element including any directives defined at lower priority.
  compile: (cElement, cAttrs, transclude) ->
  link: (\$scope, element, attrs, controller) ->
]]></content>

  <tabTrigger>ngdir</tabTrigger>
  <scope>source.coffee</scope>
</snippet>
